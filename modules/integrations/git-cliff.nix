{flake-parts-lib, ...}: {
  options.perSystem = flake-parts-lib.mkPerSystemOption ({
    lib,
    pkgs,
    config,
    ...
  }: let
    inherit (lib) mkIntegration mkOption types;

    tomlFormat = pkgs.formats.toml {};
    cfg = config.snowblower.integration.gitCliff;
    inherit (config.snowblower.command."cliff") exec;
  in {
    options.snowblower.integration.gitCliff = mkIntegration {
      name = "Git-Cliff";
      package = pkgs.git-cliff;
      config = {
        changelog = {
          header = ''# Changelog\nAll notable changes to this project will be documented in this file.\n'';
          body = ''            {% if version %}\
                      ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
                      {% else %}\
                      ## [unreleased]
                      {% endif %}\
                      {% for group, commits in commits | group_by(attribute="group") %}
                      ### {{ group | striptags | trim | upper_first }}
                      {% for commit in commits %}
                      - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
                      {% if commit.breaking %}[**breaking**] {% endif %}\
                      {{ commit.message | upper_first }}\
                      {% endfor %}
                      {% endfor %}\n'';
          commit_parsers = [
            {
              message = "^feat";
              group = "<!-- 0 -->üöÄ Features";
            }
            {
              message = "^fix";
              group = "<!-- 1 -->üêõ Bug Fixes";
            }
            {
              message = "^doc";
              group = "<!-- 3 -->üìö Documentation";
            }
            {
              message = "^perf";
              group = "<!-- 4 -->‚ö° Performance";
            }
            {
              message = "^refactor";
              group = "<!-- 2 -->üöú Refactor";
            }
            {
              message = "^style";
              group = "<!-- 5 -->üé® Styling";
            }
            {
              message = "^test";
              group = "<!-- 6 -->üß™ Testing";
            }
            {
              message = "^chore\\(release\\): prepare for";
              skip = true;
            }
            {
              message = "^chore\\(deps.*\\)";
              skip = true;
            }
            {
              message = "^chore\\(pr\\)";
              skip = true;
            }
            {
              message = "^chore\\(pull\\)";
              skip = true;
            }
            {
              message = "^chore|^ci";
              group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks";
            }
            {
              body = ".*security";
              group = "<!-- 8 -->üõ°Ô∏è Security";
            }
            {
              message = "^revert";
              group = "<!-- 9 -->‚óÄÔ∏è Revert";
            }
          ];
          trim = true;
          footer = ''<!-- generated by git-cliff -->'';
          protect_breaking_commits = false;
          filter_commits = false;
          topo_order = false;
          sort_commits = "oldest";
        };
      };
      extraOptions = {
        fileName = mkOption {
          type = types.str;
          description = "The name of the file to output the chaneglog to.";
          default = "CHANGELOG.md";
        };
      };
    };

    config.snowblower = lib.mkIf cfg.enable {
      command."cliff" = {
        displayName = "Git-Cliff";
        description = "Changelog generator";
        command = "git-cliff";
        env = "tools";
        shortcut = {
          "gen" = {
            description = "Generate a changelog";
            args = [
              "-o"
              cfg.settings.fileName
            ];
          };
        };
      };

      packages.tools = [
        cfg.package
      ];

      file."cliff.toml" = {
        enable = true;
        source = tomlFormat.generate "cliff.toml" cfg.settings.config;
      };
    };
  });
}
