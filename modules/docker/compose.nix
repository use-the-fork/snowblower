{flake-parts-lib, ...}: let
  inherit (flake-parts-lib) mkPerSystemOption;
in {
  options.perSystem = mkPerSystemOption ({
    lib,
    config,
    pkgs,
    ...
  }: let
    inherit (lib) types mkOption;
    inherit (lib.sbl.docker) mkDockerService mkCommonFlags;

    serviceModule = {
      imports = [./../../lib/types/service-module.nix];
      config._module.args = {inherit pkgs;};
    };
    serviceType = types.submodule serviceModule;

    yamlFormat = pkgs.formats.yaml {};
  in {
    imports = [
      {
        options.snowblower.docker.service = mkOption {
          type = types.submoduleWith {
            modules = [{freeformType = types.attrsOf serviceType;}];
            specialArgs = {inherit pkgs;};
          };
          default = {};
          description = ''
            The services that are available to docker-compose
          '';
        };
      }
    ];

    options.snowblower = {
      docker = {
        common = {
          dependsOn = mkOption {
            type = types.listOf types.str;
            default = [];
            description = ''
              List of services that this service depends on.
              Will be used for the `depends_on` field in docker-compose.
            '';
            example = lib.literalExpression ''[ "db" "redis" ]'';
          };
        };

        commonService = mkOption {
          inherit (yamlFormat) type;
          default = {};
          internal = true;
          description = ''
            Common configuration to be shared across services using Docker Compose's YAML anchors.
            This will be added as 'x-snowblower-common' in the generated docker-compose.yml.
          '';
          example = lib.literalExpression ''
            {
              restart = "always";
              init = true;
            }
          '';
        };
      };
    };

    config = {
      snowblower = let
        # Extract service configurations
        composeServices =
          lib.mapAttrs (_name: service: service.outputs.service)
          config.snowblower.docker.service;

        # Extract networks from services
        serviceNetworks = lib.unique (lib.flatten (
          lib.mapAttrsToList (
            _name: service:
              if service.enable && service.networks != []
              then service.networks
              else []
          )
          config.snowblower.docker.service
        ));

        # Create networks configuration with default snownet
        defaultNetworks = ["snownet"];
        allNetworks = lib.unique (defaultNetworks ++ serviceNetworks);
        networksConfig = lib.listToAttrs (map (name: {
            inherit name;
            value =
              if name == "snownet"
              then {driver = "bridge";}
              else {};
          })
          allNetworks);

        # Create the compose configuration
        composeConfig =
          {
            services = composeServices;
          }
          // {
            networks = networksConfig;
          };
      in {
        docker = {
          service."runtime" = {
            enable = true;
            service = {
              "sb-common" = mkCommonFlags {
                autoStart = true;
                runtime = true;
              };
            };
          };

          service."tools" = {
            enable = true;
            service = {
              image = "${config.snowblower.docker.image.toolsPackage.imageName}:${config.snowblower.docker.image.toolsPackage.imageTag}";
              volumes = [
                ".:/workspace"
                "\${SB_PROJECT_PROFILE:-/tmp/snowblower/profile}:/snowblower/profile"
              ];
              working_dir = "/workspace";
              tty = true;
              "sb-common" = mkCommonFlags {
                autoStart = true;
              };
            };
          };
        };

        file."docker-compose.yml" = {
          enable = true;
          text = lib.sbl.strings.modifyFileContent {
            file = yamlFormat.generate "docker-compose.yml" composeConfig;
            substitute = {
              "sb-common:" = "<<:";
              "'*use-runtime'" = "*use-runtime";
              "'*use-auto-start'" = "*use-auto-start";
              "'*use-manual-start'" = "*use-manual-start";
              "'*use-network'" = "*use-network";
            };
            prepend = ''
              # This file is automatically generated by SnowBlower.
              # Do not edit this file directly as your changes will be overwritten.
              # Instead, modify your flake.nix configuration to update Docker services.

              ${builtins.readFile ./../../lib-docker/shared.yml}
            '';
          };
        };
      };
    };
  });
}
