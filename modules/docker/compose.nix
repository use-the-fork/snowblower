{flake-parts-lib, ...}: let
  inherit (flake-parts-lib) mkPerSystemOption;
in {
  options.perSystem = mkPerSystemOption ({
    lib,
    config,
    pkgs,
    ...
  }: let
    inherit (lib) types mkOption mkDockerImage;

    serviceModule = {
      imports = [./../../lib/types/service-module.nix];
      config._module.args = {inherit pkgs;};
    };
    serviceType = types.submodule serviceModule;

    yamlFormat = pkgs.formats.yaml {};
  in {
    imports = [
      {
        options.snowblower.docker.service = mkOption {
          type = types.submoduleWith {
            modules = [{freeformType = types.attrsOf serviceType;}];
            specialArgs = {inherit pkgs;};
          };
          default = {};
          description = ''
            The services that are available to docker-compose
          '';
        };
      }
    ];

    options.snowblower = {
      docker = {
        common = {
          dependsOn = mkOption {
            type = types.listOf types.str;
            default = [];
            description = ''
              List of services that this service depends on.
              Will be used for the `depends_on` field in docker-compose.
            '';
            example = lib.literalExpression ''[ "db" "redis" ]'';
          };
        };

        commonService = mkOption {
          inherit (yamlFormat) type;
          default = {};
          internal = true;
          description = ''
            Common configuration to be shared across services using Docker Compose's YAML anchors.
            This will be added as 'x-snowblower-common' in the generated docker-compose.yml.
          '';
          example = lib.literalExpression ''
            {
              restart = "always";
              init = true;
            }
          '';
        };
      };
    };

    config = {
      snowblower = let
        # Extract service configurations
        composeServices =
          lib.mapAttrs (_name: service: service.outputs.service)
          config.snowblower.docker.service;

        # Extract networks from services
        serviceNetworks = lib.unique (lib.flatten (
          lib.mapAttrsToList (
            _name: service:
              if service.enable && service.networks != []
              then service.networks
              else []
          )
          config.snowblower.docker.service
        ));

        # Create networks configuration
        networksConfig = lib.listToAttrs (map (name: {
            inherit name;
            value = {};
          })
          serviceNetworks);

        # Create the compose configuration
        composeConfig =
          {
            "a-snowblower-common" = config.snowblower.docker.commonService;
            services = composeServices;
          }
          // lib.optionalAttrs (serviceNetworks != []) {
            networks = networksConfig;
          };
      in {
        docker = {
          commonService = {
            build = {
              context = ".";
              dockerfile = "./docker/Dockerfile";
              args = {
                USER_UID = "\${SB_USER_UID:-1000}";
                USER_GID = "\${SB_USER_GID:-1000}";
              };
            };
            volumes = [
              ".:/workspace"
            ];
            depends_on = config.snowblower.docker.common.dependsOn;
            working_dir = "/workspace";
            tty = true;
          };

          service."runtime" = {
            enable = true;
            service = {
              "a-use-snowblower-common" = "";
            };
          };
          service."tools" = {
            enable = true;
            service = {
              build = {
                context = ".";
                dockerfile = "./docker/Dockerfile.tools";
                args = {
                  USER_UID = "\${SB_USER_UID:-1000}";
                  USER_GID = "\${SB_USER_GID:-1000}";
                };
              };
              volumes = [
                ".:/workspace"
              ];
              working_dir = "/workspace";
              tty = true;
            };
          };
        };

        file."docker-compose.yml" = {
          enable = true;
          text = lib.sbl.strings.modifyFileContent {
            file = yamlFormat.generate "docker-compose.yml" composeConfig;
            substitute = {
              "a-snowblower-common:" = "x-snowblower-common: &snowblower-common";
              "a-use-snowblower-common: ''" = "<<: *snowblower-common";
            };
            prepend = ''
              # This file is automatically generated by SnowBlower.
              # Do not edit this file directly as your changes will be overwritten.
              # Instead, modify your flake.nix configuration to update Docker services.
            '';
          };
        };

        file."docker/Dockerfile" = {
          enable = true;
          source = pkgs.writeText "dockerfileRuntime" "FROM ${config.snowblower.docker.image.runtimePackage.imageName}:${config.snowblower.docker.image.runtimePackage.imageTag}";
        };

        file."docker/Dockerfile.tools" = {
          enable = true;
          source = pkgs.writeText "dockerfileTools" "FROM ${config.snowblower.docker.image.toolsPackage.imageName}:${config.snowblower.docker.image.toolsPackage.imageTag}";
        };
      };
    };
  });
}
